name: CI

on:
  pull_request:
  merge_group:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  crates-ci:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - name: check format
        run: cargo fmt --all -- --check
      - name: run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -Dwarnings
      - name: check
        run: cargo check --all-features --all-targets
      - name: run tests
        run: cargo test --all-targets --all-features

  validate-charp-bindings:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup dotnet
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 8.0.x
      - name: create bindings
        run: cargo run --example csharp_bindings -p oicana_csharp
      - name: format bindings
        run: dotnet format
        working-directory: ./integrations/csharp
      - name: validate no changes
        run: |
          if [ -n "$(git status --porcelain './integrations/csharp/')" ]; then
            echo "::error::Generated C# bindings are out of date! Update them and check in any changes."
            git --no-pager diff --color=always './generated/'
            exit 1
          fi

  build-csharp-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - name: build oicana_csharp
        run: cargo build --release -p oicana_csharp
      - name: Upload liboicana_csharp
        uses: actions/upload-artifact@v4
        with:
          name: liboicana_csharp.so
          path: ./target/release/liboicana_csharp.so

  build-browser-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@v2
        with:
          tool: wasm-pack
      - name: build browser wasm
        run: wasm-pack build --release --target web --scope oicana integrations/browser/oicana_browser_wasm
      - name: Upload browser-wasm
        uses: actions/upload-artifact@v4
        with:
          name: browser-wasm
          path: |
            ./integrations/browser/oicana_browser_wasm/pkg/oicana_browser_wasm**
            ./integrations/browser/oicana_browser_wasm/pkg/package.json
            ./integrations/browser/oicana_browser_wasm/pkg/README.md

  build-tools:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - tool: "oicana-cli"
            path: "tools/oicana_cli"
            bin: "oicana"
          - tool: "test-compare"
            path: "tools/test_compare"
            bin: "test-compare"
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - name: Build and install ${{ matrix.tool }}
        run: cargo install --path ${{ matrix.path }}
      - name: Uload CLI tool binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.tool }}
          path: ~/.cargo/bin/${{ matrix.bin }}

  e2e-test-browser-integration:
    runs-on: ubuntu-latest
    needs:
      - build-tools
      - build-browser-wasm
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@v2
        with:
          tool: typship
      - name: Install local Typst Oicana package
        run: typship install local
        working-directory: ./integrations/typst
      - uses: ./.github/actions/install-tool
        with:
          tool: "oicana-cli"
          bin: "oicana"
      - uses: ./.github/actions/install-tool
        with:
          tool: "test-compare"
      - name: test e2e template
        run: oicana test
        working-directory: ./e2e_test_template
      - name: pack e2e template
        run: oicana pack -n {template}-x.y.z.zip
        working-directory: ./e2e_test_template
      - name: install browser-wasm
        uses: actions/download-artifact@v4
        with:
          name: browser-wasm
          path: ./integrations/browser/oicana_browser_wasm/pkg
      - name: Enable npm link in browser-wasm
        run: npm link
        working-directory: ./integrations/browser/oicana_browser_wasm/pkg
      - name: install browser integration
        run: |
          npm i
          npm link @oicana/browser-wasm
        working-directory: ./integrations/browser/oicana-browser
      - name: test browser integration
        run: npm run test
        working-directory: ./integrations/browser/oicana-browser
      - name: compare test output
        run: test-compare e2e_test_template integrations/browser/oicana-browser/testOutput/

  e2e-test-csharp-integration:
    runs-on: ubuntu-latest
    needs:
      - build-tools
      - build-csharp-linux
    steps:
      - uses: actions/checkout@v5
      - name: Setup dotnet
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 8.0.x
      - uses: taiki-e/install-action@v2
        with:
          tool: typship
      - name: Install local Typst Oicana package
        run: typship install local
        working-directory: ./integrations/typst
      - uses: ./.github/actions/install-tool
        with:
          tool: "oicana-cli"
          bin: "oicana"
      - uses: ./.github/actions/install-tool
        with:
          tool: "test-compare"
      - name: test e2e template
        run: oicana test
        working-directory: ./e2e_test_template
      - name: pack e2e template
        run: oicana pack -n {template}-x.y.z.zip
        working-directory: ./e2e_test_template
      - name: install csharp lib
        uses: actions/download-artifact@v4
        with:
          name: liboicana_csharp.so
          path: ./target/release/
      - name: test csharp integration
        run: dotnet test
        working-directory: ./integrations/csharp
      - name: compare test output
        run: test-compare e2e_test_template integrations/csharp/Oicana.Test/bin/Debug/net8.0/e2e/

  typst-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: typst-community/setup-tytanic@v1
      - uses: taiki-e/install-action@v2
        with:
          tool: typstyle
      - name: check style
        run: typstyle --check .
        working-directory: ./integrations/typst
      - name: Run test suite
        run: tt run
        working-directory: ./integrations/typst
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: typst-integration-artifacts
          path: |
            integrations/typst/tests/**/diff/*.png
            integrations/typst/tests/**/out/*.png
            integrations/typst/tests/**/ref/*.png
          retention-days: 5

  spelling:
    name: Spell Check with Typos
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Actions Repository
      uses: actions/checkout@v4
    - name: Spell Check Repo
      uses: crate-ci/typos@v1.35.5

  validate-links:
    name: Check for dead links in docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: typst-community/setup-shiroa@v1
        with:
          shiroa-version: 0.3.1-rc3
      - name: serve docs
        run: |
          nohup shiroa serve book --mode static-html --workspace . > /tmp/shiroa.log 2>&1 &
          echo $! > /tmp/shiroa.pid
          sleep 15
        working-directory: docs
      - name: check for broken links
        run: npx linkinator http://localhost:25520 --recurse
      - name: clean up
        if: always()
        run: |
          kill $(cat /tmp/shiroa.pid) || true
          echo "::: Shiroa Logs :::"
          cat /tmp/shiroa.log || true
      - name: check readme links
        # Todo: add main README.md after Typst package is available on Typst universe
        run: npx linkinator integrations/typst/README.md integrations/csharp/Oicana/Readme.md integrations/browser/oicana-browser/README.md
